{-|
Module      : Problems.Problem002
Description : Sum even-valued Fibonacci numbers below four million
Maintainer  : ahartel@gmx.de
Stability   : experimental

Original problem text:

@ Each new term in the Fibonacci sequence is generated by adding the
previous two terms. By starting with 1 and 2, the first 10 terms will
be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...  By considering the terms
in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.@
-}
module Problems.Problem002 ( fibs, solution) where
-- | Calculate Fibonacci numbers in the straight-forward and slow way.
-- Takes order 2^n arithmetic operations.
--
-- * fib 2 does 2-1, fib 1, 2-2, fib 0, 0+1 (5 operations)
-- * fib 3 does 3-1, fib 2, 3-2, fib 1, 1+1 (9 operations)
-- * fib 4 does 4-1, fib 3, 4-2, fib 2, fib3+fib2 (17 operations)
-- * fib 5 does 5-1, fib 4, 5-2, fib 3, fib3+fib2 (29 operations)
fib 0 = 0
fib 1 = 1
fib n = fib (n-1) + fib (n-2)

-- | Fast Fibonacci calculator relying on Haskell's property of being lazy.
  -- Stolen from
-- <http://blog.srinivasan.biz/software/fibonacci-numbers-the-slow-way-or-the-fast-and-lazy-way>
fibs :: [Integer]
fibs = 1:1:zipWith (+) fibs (tail fibs)

-- | Take only every nth value from list xs.
every n xs = case drop (n-1) xs of
  (y:ys) -> y : every n ys
  [] -> []

-- | Since the Fibonacci numbers are always the sum of the previous numbers,
-- it turns out that only every 3rd of them is even. Therefore, we can just take
-- every 3rd Fibonacci number smaller than 4000000 and sum them up.
solution :: Integer
solution = sum evenfib
  where evenfib = takeWhile (<4000000) (every 3 fibs)

