module Problems.Problem002 where

-- Each new term in the Fibonacci sequence is generated by adding the previous
-- two terms. By starting with 1 and 2, the first 10 terms will be:
-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
-- By considering the terms in the Fibonacci sequence whose values do not exceed
-- four million, find the sum of the even-valued terms.

-- stupid and straight-forward
-- calculates 2^n subtractions and 2^(n-1) additions
fib 0 = 0
fib 1 = 1
fib n = fib (n-1) + fib (n-2)

{-http://blog.srinivasan.biz/software/fibonacci-numbers-the-slow-way-or-the-fast-and-lazy-way-}
{-fast-}
fibs = 1:1:zipWith (+) fibs (tail fibs)

every n xs = case drop (n-1) xs of
  (y:ys) -> y : every n ys
  [] -> []

solution = sum evenfib
  where evenfib = takeWhile (<4000000) (every 3 fibs)

-- main = hspec $ do
--   describe "Project Euler" $ do
--     it "Solution to problem 002 should be 4613732" $ do
--       sum evenfib `shouldBe` 4613732
--         where evenfib = takeWhile (<4000000) (every 3 fibs)
